<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        CT8XG0Y9Ozo6LDg3AAAAAAYNGP///ygtLj85QCUlLwMIG0E/BEJDOTosPjcAAAAAOAwY//85KC0QGyk6
        GBAnLwgaIzs8BT07OSw+NwAAAAADDBf//yUlLRAYGTAxMi4nMxkjNBoFNTYxLBU3AAAAAAMMF/8nJw8t
        LRAZGv8YJS4lGSMHJycmLwgsFSIAAAAAAwwX/yUlJSYnJygoHCkEBQUHKggHBwgIKywVIgAAAAACDBf/
        ////////////HP//HR0eHx8gICMkIRUiAAAAAAIMF///////////////HP//HR0eHx8gICMhFCIAAAAA
        AQwX////////////////HP//HR0eHx8gICEUIgAAAAABDBcXFxcXFxcYGBgYGRkZGRkaGhoaGhsbGxQW
        AAAAAAEMDAwMDAwMDAwNDQ0ODg8PEBEREhMTARQVFBYAAAAAAQEBAQICAgMDAwQFBQYHBwgICAkJCgoK
        CwsLCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP//////////wAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA///////////
</value>
  </data>
</root>